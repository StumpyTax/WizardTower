//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""9afff60f-433b-4959-a763-8d367e6e05e0"",
            ""actions"": [
                {
                    ""name"": ""cast_spell_1"",
                    ""type"": ""Button"",
                    ""id"": ""aa6bb5eb-a5b0-49ba-9e2f-7d851b43ced5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cast_spell_2"",
                    ""type"": ""Button"",
                    ""id"": ""09d4afa6-c06e-4964-8746-3ca01b062020"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""roll_dice"",
                    ""type"": ""Button"",
                    ""id"": ""0138c207-822a-4fa5-800c-653b944c114c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""up"",
                    ""type"": ""Button"",
                    ""id"": ""74d74cba-0e4a-4ee3-b7eb-94006d764821"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""down"",
                    ""type"": ""Button"",
                    ""id"": ""9a41b646-353e-4464-b465-4107ee7a30bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""left"",
                    ""type"": ""Button"",
                    ""id"": ""14c2d8e2-5dce-426a-a7a0-caaced02246e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""right"",
                    ""type"": ""Button"",
                    ""id"": ""12dccfa4-756c-4d30-8ab3-3597bef5a328"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""416267f0-9a9e-4e5a-aee4-9fc5e1f1a1ac"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cast_spell_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""364808df-5a94-4611-9497-fc76ec4cf4ba"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cast_spell_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca8d4990-adee-4409-9d8f-34938dcc8fe4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""roll_dice"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5a4dd13-ff24-4e3b-a243-03a65cf24122"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5054de2-85b3-4ecf-a9fb-8ca9032a0919"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c98e1b-b2c7-412d-ade8-a8ff02a369ec"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""111295db-fb61-45a1-aecb-b74d22331ae6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_cast_spell_1 = m_Player.FindAction("cast_spell_1", throwIfNotFound: true);
        m_Player_cast_spell_2 = m_Player.FindAction("cast_spell_2", throwIfNotFound: true);
        m_Player_roll_dice = m_Player.FindAction("roll_dice", throwIfNotFound: true);
        m_Player_up = m_Player.FindAction("up", throwIfNotFound: true);
        m_Player_down = m_Player.FindAction("down", throwIfNotFound: true);
        m_Player_left = m_Player.FindAction("left", throwIfNotFound: true);
        m_Player_right = m_Player.FindAction("right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_cast_spell_1;
    private readonly InputAction m_Player_cast_spell_2;
    private readonly InputAction m_Player_roll_dice;
    private readonly InputAction m_Player_up;
    private readonly InputAction m_Player_down;
    private readonly InputAction m_Player_left;
    private readonly InputAction m_Player_right;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @cast_spell_1 => m_Wrapper.m_Player_cast_spell_1;
        public InputAction @cast_spell_2 => m_Wrapper.m_Player_cast_spell_2;
        public InputAction @roll_dice => m_Wrapper.m_Player_roll_dice;
        public InputAction @up => m_Wrapper.m_Player_up;
        public InputAction @down => m_Wrapper.m_Player_down;
        public InputAction @left => m_Wrapper.m_Player_left;
        public InputAction @right => m_Wrapper.m_Player_right;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @cast_spell_1.started += instance.OnCast_spell_1;
            @cast_spell_1.performed += instance.OnCast_spell_1;
            @cast_spell_1.canceled += instance.OnCast_spell_1;
            @cast_spell_2.started += instance.OnCast_spell_2;
            @cast_spell_2.performed += instance.OnCast_spell_2;
            @cast_spell_2.canceled += instance.OnCast_spell_2;
            @roll_dice.started += instance.OnRoll_dice;
            @roll_dice.performed += instance.OnRoll_dice;
            @roll_dice.canceled += instance.OnRoll_dice;
            @up.started += instance.OnUp;
            @up.performed += instance.OnUp;
            @up.canceled += instance.OnUp;
            @down.started += instance.OnDown;
            @down.performed += instance.OnDown;
            @down.canceled += instance.OnDown;
            @left.started += instance.OnLeft;
            @left.performed += instance.OnLeft;
            @left.canceled += instance.OnLeft;
            @right.started += instance.OnRight;
            @right.performed += instance.OnRight;
            @right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @cast_spell_1.started -= instance.OnCast_spell_1;
            @cast_spell_1.performed -= instance.OnCast_spell_1;
            @cast_spell_1.canceled -= instance.OnCast_spell_1;
            @cast_spell_2.started -= instance.OnCast_spell_2;
            @cast_spell_2.performed -= instance.OnCast_spell_2;
            @cast_spell_2.canceled -= instance.OnCast_spell_2;
            @roll_dice.started -= instance.OnRoll_dice;
            @roll_dice.performed -= instance.OnRoll_dice;
            @roll_dice.canceled -= instance.OnRoll_dice;
            @up.started -= instance.OnUp;
            @up.performed -= instance.OnUp;
            @up.canceled -= instance.OnUp;
            @down.started -= instance.OnDown;
            @down.performed -= instance.OnDown;
            @down.canceled -= instance.OnDown;
            @left.started -= instance.OnLeft;
            @left.performed -= instance.OnLeft;
            @left.canceled -= instance.OnLeft;
            @right.started -= instance.OnRight;
            @right.performed -= instance.OnRight;
            @right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnCast_spell_1(InputAction.CallbackContext context);
        void OnCast_spell_2(InputAction.CallbackContext context);
        void OnRoll_dice(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
